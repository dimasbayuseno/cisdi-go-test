version: '3.8'

services:
  # PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: cms_cisdi_postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Config .env
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - cms_cisdi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cms_cisdi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    container_name: cms_cisdi_redis
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - cms_cisdi_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Go
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cms_cisdi_api
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${APP_PORT}:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cms_cisdi_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health-check"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cms_cisdi_network:
    driver: bridge
